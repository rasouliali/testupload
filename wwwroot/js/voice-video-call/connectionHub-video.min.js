const isDebugging=!0;var isVideoCall=!1,peerConnectionConfig={iceServers:[{url:"stun:stun.aliras.ir"},{urls:"turn:stun.aliras.ir",username:"AliRasouli",credential:"UJDEujDE@123321..!!"}]},facingModeStr=($(".hangup").click(function(){beepring.pause(),beepring.currentTime=0,beepring.volume=0,console.log("hangup...."),clearInterval(videoaudiotimer),"idle"!==$("body").attr("data-mode")&&(mySignalRListener.HangUp(),closeAllConnections(),$("#CallingModal").modal("hide"),$("body").attr("data-mode","idle"),$("#callstatus").text("Idle"),remoteStream=localStream=null,remoteStream2=null,localVideo.srcObject=null,remoteVideo.srcObject=null,remoteVideo2.srcObject=null),$("body").removeAttr("data-json")}),"user");function getVideoConfig(){return{audio:!0,video:{width:{exact:320},height:{exact:240},facingMode:facingModeStr}}}var webrtcConstraints=getVideoConfig(),webrtcVoiceConstraints={audio:!0,video:!1},streamInfo={applicationName:WOWZA_APPLICATION_NAME,streamName:WOWZA_STREAM_NAME,sessionId:WOWZA_SESSION_ID_EMPTY};const localaudio=document.getElementById("localaudio"),localVideo=document.getElementById("localVideo"),remoteVideo=document.getElementById("remoteVideo"),remoteVideo2=document.getElementById("remoteVideo"),partnerAudio=document.querySelector(".audio.partner"),partnerAudio2=document.querySelector(".audio.partner2");var videoaudiotimer,WOWZA_STREAM_NAME=null,connections={},localStream=null,beforeSignals=(remoteStream=null,attachMediaStream=(e,o)=>{console.log("OnPage: called attachMediaStream"),remoteStream=e.stream,0<e.stream.getVideoTracks().length?(remoteVideo.srcObject=e.stream,[e]=e.stream.getVideoTracks(),e.onmute=function(){console.log("Video muted"),$("#CallingModal .video").eq(1).removeClass("active"),$("#CallingModal .video").eq(1).find("video").hide()}):partnerAudio.srcObject=remoteStream},[]);const receivedCandidateSignal=(e,o,n)=>{thisSignalReceiveBefore(e,o,n)||(beforeSignals.push({connection:e,callid:o,candidate:n}),console.log("WebRTC: adding full candidate"),e.addIceCandidate(new RTCIceCandidate(n),()=>console.log("WebRTC: added candidate successfully"),()=>console.log("WebRTC: cannot add candidate")))};function thisSignalReceiveBefore(e,o,n){for(var a=0;a<beforeSignals.length;a++)if(JSON.stringify(beforeSignals[a].connection)==JSON.stringify(e)&&beforeSignals[a].partnerClientId==o&&JSON.stringify(beforeSignals[a].candidate)==JSON.stringify(n))return!0;return!1}const receivedSdpSignal=(e,o,n)=>{console.log("connection: ",e),console.log("sdp",n),console.log("WebRTC: called receivedSdpSignal"),console.log("WebRTC: processing sdp signal"),e.setRemoteDescription(new RTCSessionDescription(n),()=>{console.log("WebRTC: set Remote Description"),"offer"==e.remoteDescription.type?createAnswerWhenVideoOrAudioIsReady(e,o):"answer"==e.remoteDescription.type&&console.log("WebRTC: remote Description type answer")},errorHandler)};function createAnswerWhenVideoOrAudioIsReady(o,n){null==localStream?setTimeout(function(){createAnswerWhenVideoOrAudioIsReady(o,n)},500):(console.log("WebRTC: remote Description type offer"),console.log("localStream:",localStream),o.addStream(localStream),console.log("WebRTC: added stream"),o.createAnswer().then(e=>{console.log("WebRTC: create Answer..."),o.setLocalDescription(e,()=>{console.log("WebRTC: set Local Description..."),console.log("connection.localDescription: ",o.localDescription),sendHubSignal(JSON.stringify({sdp:o.localDescription}),n,o.userId)},errorHandler)},errorHandler))}const newSignal=(e,o,n,a)=>{console.log("WebRTC: called newSignal");o=JSON.parse(o),a=getConnection(n,a);console.log("connection: ",a),o.sdp?(console.log("WebRTC: sdp signal"),receivedSdpSignal(a,n,o.sdp)):o.candidate?(console.log("WebRTC: candidate signal"),receivedCandidateSignal(a,n,o.candidate)):(console.log("WebRTC: adding null candidate"),a.addIceCandidate(null,()=>console.log("WebRTC: added null candidate successfully"),()=>console.log("WebRTC: cannot add null candidate")))},onReadyForStream=e=>{console.log("WebRTC: called onReadyForStream"),e.addStream(localStream),console.log("WebRTC: added stream")},onStreamRemoved=(e,o)=>{console.log("WebRTC: onStreamRemoved -> Removing stream: ")},closeConnection=e=>{console.log("WebRTC: called closeConnection ");var o=connections[e];o&&(onStreamRemoved(null,null),localStream&&localStream.getTracks().forEach(function(e){e.stop()}),remoteStream&&remoteStream.getTracks().forEach(function(e){e.stop()}),$("#CallingModal").modal("hide"),o.close(),delete connections[e])},closeAllConnections=()=>{for(var e in console.log("WebRTC: call closeAllConnections "),connections)closeConnection(e);localStream&&localStream.getTracks().forEach(function(e){e.stop()}),remoteStream&&remoteStream.getTracks().forEach(function(e){e.stop()}),remoteStream=localStream=null},getConnection=(e,o)=>(console.log("WebRTC: called getConnection"),connections[e]?(console.log("WebRTC: connections partner client exist"),connections[e]):(console.log("WebRTC: initialize new connection"),initializeConnection(e,o))),initiateOffer=(o,e,n,a)=>{console.log("WebRTC: called initiateoffer: ");var t=getConnection(o,a);t.addStream(n),console.log("WebRTC: Added local stream"),t.createOffer().then(e=>{console.log("WebRTC: created Offer: "),console.log("WebRTC: Description after offer: ",e),t.setLocalDescription(e).then(()=>{console.log("WebRTC: set Local Description: "),console.log("connection before sending offer ",t),sendHubSignal(JSON.stringify({sdp:t.localDescription}),o,a)}).catch(e=>console.error("WebRTC: Error while setting local description",e))}).catch(e=>console.error("WebRTC: Error while creating offer",e))},callbackUserMediaSuccess=e=>{console.log("WebRTC: got media stream"),localStream=e,isVideoCall?localVideo.srcObject=e:localaudio.secObject=e},initializeUserMediaVideo=()=>{console.log("WebRTC: InitializeUserMedia: "),navigator.getUserMedia(webrtcConstraints,callbackUserMediaSuccess,errorHandler)},initializeUserMediaVoice=()=>{console.log("WebRTC: InitializeUserMedia: "),navigator.getUserMedia(webrtcVoiceConstraints,callbackUserMediaSuccess,errorHandler)},callbackRemoveStream=(e,o,n)=>{console.log("WebRTC: removing remote stream from partner window"),remoteVideo.srcObject=""},callbackAddStream=(e,o,n)=>{console.log("WebRTC: called callbackAddStream"),attachMediaStream(o,e)},callbackNegotiationNeeded=(e,o)=>{console.log("WebRTC: Negotiation needed...")},callbackIceCandidate=(e,o,n,a,t)=>{console.log("WebRTC: Ice Candidate callback"),e.candidate?(console.log("WebRTC: new ICE candidate"),sendHubSignal(JSON.stringify({candidate:e.candidate}),n,t)):(console.log("WebRTC: ICE candidate gathering complete"),sendHubSignal(JSON.stringify({candidate:null}),n,t))},initializeConnection=(o,n)=>{console.log("WebRTC: Initializing connection...");var a=new RTCPeerConnection(peerConnectionConfig);return a.oniceconnectionstatechange=function(e){console.log("oniceconnectionstatechange",e),"disconnected"==a.iceConnectionState&&(console.log("Disconnected"),"idle"!=$("body").attr("data-mode"))&&(alertify.error("Sorry, your call has been terminated with an internet connection error.",5),$(".hangup").trigger("click"))},a.onicecandidate=e=>callbackIceCandidate(e,a,o,isCaller,n),a.onaddstream=e=>callbackAddStream(a,e,n),a.onremovestream=e=>callbackRemoveStream(a,e,n),a.userId=n,connections[o]=a};function createOfferWhenLocalStreamIsReady(e){try{var o;null==localStream?setTimeout(function(){console.log("createOfferWhenLocalStreamIsReady","localStream is null yet"),createOfferWhenLocalStreamIsReady(e)},500):(console.log("createOfferWhenLocalStreamIsReady","before initiateOffer"),o=mySignalRListener.getCallidByUserId(e.userId),initiateOffer(o,e.connectionId,localStream,e.userId),console.log("createOfferWhenLocalStreamIsReady","after initiateOffer"),$("body").attr("data-mode","incall"),$("#ChatPmModal").modal("hide"),$("#callstatus").text("In Call"),console.log("signalr_callAccepted","end"))}catch(e){}}sendHubSignal=(e,o,n)=>{console.log("candidate",e),console.log("SignalR: called sendhubsignal "),mySignalRListener.SendSignal(e,o)};const errorHandler=e=>{(e.message?alertify.alert("<h4>Error Occurred</h4></br>Error Info: "+JSON.stringify(e.message)):alertify.alert("<h4>Error Occurred</h4></br>Error Info: "+JSON.stringify(e))).set({title:"ZN Vostok"}).set({delay:5e3}),consoleLogger(e)},consoleLogger=e=>{isDebugging&&console.log(e)};function SendNotConnectAlert(e){alertify.confirm(e,function(e){e&&window.location.reload(),sendNotConnectMess=!1}).set({title:"ZN Vostok"}).set("closable",!1).set("labels",{ok:"Refresh",cancel:"Wait for now"})}