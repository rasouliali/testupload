function timerDisplayFun(){var r=new Date,n=r-dt1,t=Math.floor(n/1e3%60),i=Math.floor(n/6e4);document.querySelector(".recording-timer-display label").innerHTML=(i<10?"0":"")+i.toString()+":"+(t<10?"0":"")+t.toString();videoaudiotimer=setTimeout(timerDisplayFun,1e3)}function thisSignalReceiveBefore(n,t,i){for(var r=0;r<beforeSignals.length;r++)if(JSON.stringify(beforeSignals[r].connection)==JSON.stringify(n)&&beforeSignals[r].partnerClientId==t&&JSON.stringify(beforeSignals[r].candidate)==JSON.stringify(i))return!0;return!1}function createAnswerWhenVideoOrAudioIsReady(n,t){localStream==null?setTimeout(function(){createAnswerWhenVideoOrAudioIsReady(n,t)},500):(console.log("WebRTC: remote Description type offer"),console.log("localStream:",localStream),n.addStream(localStream),console.log("WebRTC: added stream"),n.createAnswer().then(i=>{console.log("WebRTC: create Answer..."),n.setLocalDescription(i,()=>{console.log("WebRTC: set Local Description..."),console.log("connection.localDescription: ",n.localDescription),sendHubSignal(JSON.stringify({sdp:n.localDescription}),t)},errorHandler)},errorHandler))}function createOfferWhenLocalStreamIsReady(n,t){try{t==null?setTimeout(function(){createOfferWhenLocalStreamIsReady(n,t)},500):(initiateOffer(n.connectionId,t),$("body").attr("data-mode","incall"),$("#ChatPmModal").modal("hide"),$("#callstatus").text("In Call"),console.log("signalr_callAccepted","end"))}catch(i){}}function SendNotConnectAlert(n){alertify.confirm(n,function(n){n&&window.location.reload();sendNotConnectMess=!1}).set({title:"ZN Vostok"}).set("closable",!1).set("labels",{ok:"Refresh",cancel:"Wait for now"})}var isVideoCall=!1,peerConnectionConfig={iceServers:[{url:"stun:stun.l.google.com:19302"}]},videoaudiotimer,dt1,beforeSignals;$(".hangup").click(function(){try{wsconn.stop()}catch(n){}try{restartSignalR()}catch(n){}beepring.pause();beepring.currentTime=0;beepring.volume=0;console.log("hangup....");clearInterval(videoaudiotimer);$("body").attr("data-mode")!=="idle"&&(mySignalRListener.HangUp(),closeAllConnections(),$("#VideoCallModal").modal("hide"),$("body").attr("data-mode","idle"),$("#callstatus").text("Idle"),localStream=null,remoteStream=null)});var webrtcConstraints={audio:!0,video:{width:{exact:320},height:{exact:240},frameRate:{exact:3}}},webrtcVoiceConstraints={audio:!0,video:!1},streamInfo={applicationName:WOWZA_APPLICATION_NAME,streamName:WOWZA_STREAM_NAME,sessionId:WOWZA_SESSION_ID_EMPTY};const localVideo=document.getElementById("localVideo"),remoteVideo=document.getElementById("remoteVideo"),partnerAudio=document.querySelector(".audio.partner");var WOWZA_STREAM_NAME=null,connections={},localStream=null;remoteStream=null;attachMediaStream=n=>{console.log("OnPage: called attachMediaStream"),remoteStream=n.stream,dt1=new Date,videoaudiotimer=setTimeout(timerDisplayFun,1e3),isVideoCall?remoteVideo.srcObject=n.stream:partnerAudio.srcObject=n.stream};beforeSignals=[];const receivedCandidateSignal=(n,t,i)=>{thisSignalReceiveBefore(n,t,i)||(beforeSignals.push({connection:n,partnerClientId:t,candidate:i}),console.log("WebRTC: adding full candidate"),n.addIceCandidate(new RTCIceCandidate(i),()=>console.log("WebRTC: added candidate successfully"),()=>console.log("WebRTC: cannot add candidate")))};const receivedSdpSignal=(n,t,i)=>{console.log("connection: ",n),console.log("sdp",i),console.log("WebRTC: called receivedSdpSignal"),console.log("WebRTC: processing sdp signal"),n.setRemoteDescription(new RTCSessionDescription(i),()=>{console.log("WebRTC: set Remote Description"),n.remoteDescription.type=="offer"?createAnswerWhenVideoOrAudioIsReady(n,t):n.remoteDescription.type=="answer"&&console.log("WebRTC: remote Description type answer")},errorHandler)};const newSignal=(n,t)=>{console.log("WebRTC: called newSignal");var i=JSON.parse(t),r=getConnection(n);console.log("connection: ",r);i.sdp?(console.log("WebRTC: sdp signal"),receivedSdpSignal(r,n,i.sdp)):i.candidate?(console.log("WebRTC: candidate signal"),receivedCandidateSignal(r,n,i.candidate)):(console.log("WebRTC: adding null candidate"),r.addIceCandidate(null,()=>console.log("WebRTC: added null candidate successfully"),()=>console.log("WebRTC: cannot add null candidate")))},onReadyForStream=n=>{console.log("WebRTC: called onReadyForStream"),n.addStream(localStream),console.log("WebRTC: added stream")},onStreamRemoved=()=>{console.log("WebRTC: onStreamRemoved -> Removing stream: ")},closeConnection=n=>{console.log("WebRTC: called closeConnection ");var t=connections[n];t&&(onStreamRemoved(null,null),localStream&&localStream.getTracks().forEach(function(n){n.stop()}),remoteStream&&remoteStream.getTracks().forEach(function(n){n.stop()}),$("#VideoCallModal").modal("hide"),t.close(),delete connections[n])},closeAllConnections=()=>{try{wsconn.stop()}catch(t){}try{restartSignalR()}catch(t){}console.log("WebRTC: call closeAllConnections ");for(var n in connections)closeConnection(n);localStream&&localStream.getTracks().forEach(function(n){n.stop()});remoteStream&&remoteStream.getTracks().forEach(function(n){n.stop()});localStream=null;remoteStream=null},getConnection=n=>(console.log("WebRTC: called getConnection"),connections[n]?(console.log("WebRTC: connections partner client exist"),connections[n]):(console.log("WebRTC: initialize new connection"),initializeConnection(n))),initiateOffer=(n,t)=>{console.log("WebRTC: called initiateoffer: ");var i=getConnection(n);i.addStream(t);console.log("WebRTC: Added local stream");i.createOffer().then(t=>{console.log("WebRTC: created Offer: "),console.log("WebRTC: Description after offer: ",t),i.setLocalDescription(t).then(()=>{console.log("WebRTC: set Local Description: "),console.log("connection before sending offer ",i),sendHubSignal(JSON.stringify({sdp:i.localDescription}),n)}).catch(n=>console.error("WebRTC: Error while setting local description",n))}).catch(n=>console.error("WebRTC: Error while creating offer",n))},callbackUserMediaSuccess=n=>{console.log("WebRTC: got media stream"),localStream=n,isVideoCall&&(localVideo.srcObject=n)},initializeUserMediaVideo=()=>{console.log("WebRTC: InitializeUserMedia: "),navigator.getUserMedia(webrtcConstraints,callbackUserMediaSuccess,errorHandler)},initializeUserMediaVoice=()=>{console.log("WebRTC: InitializeUserMedia: "),navigator.getUserMedia(webrtcVoiceConstraints,callbackUserMediaSuccess,errorHandler)},callbackRemoveStream=()=>{console.log("WebRTC: removing remote stream from partner window"),remoteVideo.srcObject=""},callbackAddStream=(n,t)=>{console.log("WebRTC: called callbackAddStream"),attachMediaStream(t)},callbackNegotiationNeeded=()=>{console.log("WebRTC: Negotiation needed...")},callbackIceCandidate=(n,t,i)=>{console.log("WebRTC: Ice Candidate callback"),n.candidate?(console.log("WebRTC: new ICE candidate"),sendHubSignal(JSON.stringify({candidate:n.candidate}),i)):(console.log("WebRTC: ICE candidate gathering complete"),sendHubSignal(JSON.stringify({candidate:null}),i))},initializeConnection=n=>{console.log("WebRTC: Initializing connection...");var t=new RTCPeerConnection(peerConnectionConfig);return t.oniceconnectionstatechange=function(){t.iceConnectionState=="disconnected"&&(console.log("Disconnected"),alertify.error("Sorry, you are already in a call.  Conferencing is not yet implemented.",5),setTimeout(function(){$(".hangup").trigger("click")},3e3))},t.onicecandidate=i=>callbackIceCandidate(i,t,n),t.onaddstream=n=>callbackAddStream(t,n),t.onremovestream=n=>callbackRemoveStream(t,n),connections[n]=t,t};sendHubSignal=(n,t)=>{console.log("candidate",n),console.log("SignalR: called sendhubsignal "),mySignalRListener.SendSignal(n,t).catch(errorHandler)};const errorHandler=n=>{n.message?alertify.alert("<h4>Error Occurred<\/h4><\/br>Error Info: "+JSON.stringify(n.message)).set({title:"ZN Vostok"}).set({delay:5e3}):alertify.alert("<h4>Error Occurred<\/h4><\/br>Error Info: "+JSON.stringify(n)).set({title:"ZN Vostok"}).set({delay:5e3}),consoleLogger(n)},consoleLogger=n=>{isDebugging&&console.log(n)};