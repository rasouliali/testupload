const isDebugging=!0;var hubUrl=document.location.pathname+"ConnectionHub",isVideoCall=!1,wsconn=(new signalR.HubConnectionBuilder).withUrl(hubUrl,signalR.HttpTransportType.WebSockets).configureLogging(signalR.LogLevel.None).build(),peerConnectionConfig={iceServers:[{url:"stun:stun.l.google.com:19302"}]};$(document).ready(function(){initializeSignalR();$(document).on("click",".user",function(){console.log("calling user... ");var n=$(this).attr("UserId");if($("body").attr("data-mode")!=="idle"){alertify.error("Sorry, you are already in a call.  Conferencing is not yet implemented.");return}n!=myUserId?(wsconn.invoke("callUser",n),$("body").attr("data-mode","calling"),$("#callstatus").text("Calling...")):alertify.error("Ah, nope.  Can't call yourself.")});$(".hangup").click(function(){console.log("hangup....");$("body").attr("data-mode")!=="idle"&&(wsconn.invoke("hangUp"),closeAllConnections(),$("#VideoCallModal").modal("hide"),$("body").attr("data-mode","idle"),$("#callstatus").text("Idle"),$(".loading").show(),setTimeout(function(){window.location.reload()},1e3))})});var webrtcConstraints={audio:!0,video:!0},webrtcVoiceConstraints={audio:!0,video:!1},streamInfo={applicationName:WOWZA_APPLICATION_NAME,streamName:WOWZA_STREAM_NAME,sessionId:WOWZA_SESSION_ID_EMPTY};const localVideo=document.getElementById("localVideo"),remoteVideo=document.getElementById("remoteVideo"),partnerAudio=document.querySelector(".audio.partner");var WOWZA_STREAM_NAME=null,connections={},localStream=null;remoteStream=null;attachMediaStream=n=>{console.log("OnPage: called attachMediaStream"),remoteStream=n.stream,isVideoCall?remoteVideo.srcObject=n.stream:partnerAudio.srcObject=n.stream};const receivedCandidateSignal=(n,t,i)=>{console.log("WebRTC: adding full candidate"),n.addIceCandidate(new RTCIceCandidate(i),()=>console.log("WebRTC: added candidate successfully"),()=>console.log("WebRTC: cannot add candidate"))},receivedSdpSignal=(n,t,i)=>{console.log("connection: ",n),console.log("sdp",i),console.log("WebRTC: called receivedSdpSignal"),console.log("WebRTC: processing sdp signal"),n.setRemoteDescription(new RTCSessionDescription(i),()=>{console.log("WebRTC: set Remote Description"),n.remoteDescription.type=="offer"?(console.log("WebRTC: remote Description type offer"),console.log(localStream),n.addStream(localStream),console.log("WebRTC: added stream"),n.createAnswer().then(i=>{console.log("WebRTC: create Answer..."),n.setLocalDescription(i,()=>{console.log("WebRTC: set Local Description..."),console.log("connection.localDescription: ",n.localDescription),sendHubSignal(JSON.stringify({sdp:n.localDescription}),t)},errorHandler)},errorHandler)):n.remoteDescription.type=="answer"&&console.log("WebRTC: remote Description type answer")},errorHandler)},newSignal=(n,t)=>{console.log("WebRTC: called newSignal");var i=JSON.parse(t),r=getConnection(n);console.log("connection: ",r);i.sdp?(console.log("WebRTC: sdp signal"),receivedSdpSignal(r,n,i.sdp)):i.candidate?(console.log("WebRTC: candidate signal"),receivedCandidateSignal(r,n,i.candidate)):(console.log("WebRTC: adding null candidate"),r.addIceCandidate(null,()=>console.log("WebRTC: added null candidate successfully"),()=>console.log("WebRTC: cannot add null candidate")))},onReadyForStream=n=>{console.log("WebRTC: called onReadyForStream"),n.addStream(localStream),console.log("WebRTC: added stream")},onStreamRemoved=()=>{console.log("WebRTC: onStreamRemoved -> Removing stream: ")},closeConnection=n=>{console.log("WebRTC: called closeConnection ");var t=connections[n];t&&(onStreamRemoved(null,null),localStream&&localStream.getTracks().forEach(function(n){n.stop()}),remoteStream&&remoteStream.getTracks().forEach(function(n){n.stop()}),$("#VideoCallModal").modal("hide"),t.close(),$(".loading").show(),setTimeout(function(){window.location.reload()},1e3),delete connections[n])},closeAllConnections=()=>{console.log("WebRTC: call closeAllConnections ");for(var n in connections)closeConnection(n);localStream&&localStream.getTracks().forEach(function(n){n.stop()});remoteStream&&remoteStream.getTracks().forEach(function(n){n.stop()});$(".loading").show();setTimeout(function(){window.location.reload()},1e3)},getConnection=n=>(console.log("WebRTC: called getConnection"),connections[n]?(console.log("WebRTC: connections partner client exist"),connections[n]):(console.log("WebRTC: initialize new connection"),initializeConnection(n))),initiateOffer=(n,t)=>{console.log("WebRTC: called initiateoffer: ");var i=getConnection(n);i.addStream(t);console.log("WebRTC: Added local stream");i.createOffer().then(t=>{console.log("WebRTC: created Offer: "),console.log("WebRTC: Description after offer: ",t),i.setLocalDescription(t).then(()=>{console.log("WebRTC: set Local Description: "),console.log("connection before sending offer ",i),setTimeout(()=>{sendHubSignal(JSON.stringify({sdp:i.localDescription}),n)},1e3)}).catch(n=>console.error("WebRTC: Error while setting local description",n))}).catch(n=>console.error("WebRTC: Error while creating offer",n))},callbackUserMediaSuccess=n=>{console.log("WebRTC: got media stream"),localStream=n,isVideoCall&&(localVideo.srcObject=n)},initializeUserMediaVideo=()=>{console.log("WebRTC: InitializeUserMedia: "),navigator.getUserMedia(webrtcConstraints,callbackUserMediaSuccess,errorHandler)},initializeUserMediaVoice=()=>{console.log("WebRTC: InitializeUserMedia: "),navigator.getUserMedia(webrtcVoiceConstraints,callbackUserMediaSuccess,errorHandler)},callbackRemoveStream=()=>{console.log("WebRTC: removing remote stream from partner window"),remoteVideo.srcObject=""},callbackAddStream=(n,t)=>{console.log("WebRTC: called callbackAddStream"),attachMediaStream(t)},callbackNegotiationNeeded=()=>{console.log("WebRTC: Negotiation needed...")},callbackIceCandidate=(n,t,i)=>{console.log("WebRTC: Ice Candidate callback"),n.candidate?(console.log("WebRTC: new ICE candidate"),sendHubSignal(JSON.stringify({candidate:n.candidate}),i)):(console.log("WebRTC: ICE candidate gathering complete"),sendHubSignal(JSON.stringify({candidate:null}),i))},initializeConnection=n=>{console.log("WebRTC: Initializing connection...");var t=new RTCPeerConnection(peerConnectionConfig);return t.onicecandidate=i=>callbackIceCandidate(i,t,n),t.onaddstream=n=>callbackAddStream(t,n),t.onremovestream=n=>callbackRemoveStream(t,n),connections[n]=t,t};sendHubSignal=(n,t)=>{console.log("candidate",n),console.log("SignalR: called sendhubsignal "),wsconn.invoke("sendSignal",n,t).catch(errorHandler)};wsconn.onclose(n=>{n?(console.log("SignalR: closed with error."),console.log(n)):console.log("Disconnected")});wsconn.on("updateUserList",n=>{consoleLogger("SignalR: called updateUserList"+JSON.stringify(n)),$("#usersLength").text(n.length),$("#usersdata li.user").remove(),$.each(n,function(t){var i="",u="",r;n[t].username===$("#upperUsername").text()&&(myConnectionId=n[t].connectionId,i="icon-employee",u="Me");i||(i=n[t].inCall?"icon-smartphone-1":"icon-smartphone-1");u=n[t].inCall?"In Call":"Available";r='<li class="list-group-item user" data-cid='+n[t].connectionId+" data-username="+n[t].username+">";r+='<a href="#"><div class="username"> '+n[t].username+"<\/div>";r+='<span class="helper '+i+'" data-callstatus='+n[t].inCall+"><\/span><\/a><\/li>";$("#usersdata").append(r)})});wsconn.on("callAccepted",n=>{console.log("SignalR: call accepted from: "+JSON.stringify(n)+".  Initiating WebRTC call and offering my stream up..."),initiateOffer(n.connectionId,localStream),$("body").attr("data-mode","incall"),$("#ChatPmModal").modal("hide"),$("#callstatus").text("In Call")});wsconn.on("callDeclined",(n,t)=>{console.log("SignalR: call declined from: "+n.connectionId),alertify.error(t),$(".loading").show(),setTimeout(function(){window.location.reload()},1e3),$("body").attr("data-mode","idle")});wsconn.on("incomingCall",(n,t)=>{console.log("SignalR: incoming"+(isVideoCall?" video ":" voice ")+"call from: "+JSON.stringify(n)),isVideoCall=t,isVideoCall==!1?(localVideo.style.display="none",remoteVideo.style.display="none",$(".partner")[0].style.display="",$("#VideoCallModalLabel").html("Voice Call")):($(".partner")[0].style.display="none",localVideo.style.display="",remoteVideo.style.display="",$("#VideoCallModalLabel").html("Video Call")),alertify.confirm(n.username+" is calling.  Do you want to"+(isVideoCall?" video ":" voice ")+"chat?",function(t){t?(isVideoCall==!1?initializeUserMediaVoice():initializeUserMediaVideo(),$("#VideoCallModal").modal("show"),wsconn.invoke("AnswerCall",!0,n).catch(n=>console.log(n)),$("body").attr("data-mode","incall"),$("#callstatus").text("In Call")):wsconn.invoke("AnswerCall",!1,n).catch(n=>console.log(n))})});wsconn.on("receiveSignal",(n,t)=>{newSignal(n.connectionId,t)});wsconn.on("callEnded",(n,t)=>{console.log("SignalR: call with "+n.connectionId+" has ended: "+t),alertify.error(t),closeConnection(n.connectionId),$(".loading").show(),setTimeout(function(){window.location.reload()},1e3),$("body").attr("data-mode","idle"),$("#callstatus").text("Idle")});const initializeSignalR=()=>{wsconn.start().then(()=>{console.log("SignalR: Connected");var n=$("#profile > .wrap > p").text();setUsername(n,myUserId)}).catch(n=>console.log(n))},setUsername=(n,t)=>{consoleLogger("SingnalR: setting username..."),wsconn.invoke("Join",n,t).catch(n=>{consoleLogger(n),alertify.alert("<h4>Failed SignalR Connection<\/h4> We were not able to connect you to the signaling server.<br/><br/>Error: "+JSON.stringify(n))}),$("#upperUsername").text(n),$("div.username").text(n)},generateRandomUsername=()=>{consoleLogger("SignalR: Generating random username...");let n="User "+Math.floor(Math.random()*1e4+1);alertify.success("You really need a username, so we will call you... "+n);setUsername(n)},errorHandler=n=>{n.message?alertify.alert("<h4>Error Occurred<\/h4><\/br>Error Info: "+JSON.stringify(n.message)):alertify.alert("<h4>Error Occurred<\/h4><\/br>Error Info: "+JSON.stringify(n)),consoleLogger(n)},consoleLogger=n=>{isDebugging&&console.log(n)};